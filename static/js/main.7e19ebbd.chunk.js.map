{"version":3,"sources":["assets/engineer.svg","components/button-control/index.jsx","components/modal-choose-option/index.jsx","constants/IconMarker.jsx","constants/IconMarkerPin.jsx","hooks/geo-location/index.js","Map.jsx","helpers/convert-time.js","App.jsx","index.jsx"],"names":["module","exports","ButtonControl","mapLayers","onStopMoving","onStartMoving","onShow","className","JSON","stringify","type","onClick","ModalChooseAction","isModalVisible","iniStyle","onCancel","onChangeStyle","title","visible","footer","name","labelCol","span","wrapperCol","onFinish","values","autoComplete","initialValues","Item","label","Group","value","showNow","format","offset","sm","md","lg","htmlType","L","icon","iconSize","iconAnchor","popupAnchor","iconUrl","shadowUrl","Icon","require","useGeoLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","PrintControl","withLeaflet","PrintControlDefault","DamageAssessment","userLocation","usePosition","center","setCenter","setMapLayers","count","setCount","inprogress","setInprogress","locationMoving","setLocationMoving","setIsModalVisible","color","time","moment","styleDraw","setStyleDraw","mapRef","useRef","printControl","onTimeout","timeCheck","duration","split","minutes","seconds","Number","convertTime","console","log","current","setTimeout","c","clearTimeout","Map","zoom","ref","style","height","Marker","position","Popup","TileLayer","url","maxZoom","subdomains","Polyline","positions","length","map","loca","index","CircleMarker","key","fill","radius","layer","latlngs","IconMarkerPin","id","onChange","e","target","sizeModes","hideControlContainer","exportOnly","FeatureGroup","onCreated","layerType","_leaflet_id","layers","getLatLngs","onEdited","_layers","Object","editing","l","onDeleted","filter","draw","rectangle","polyline","circle","circlemarker","marker","alert","leafletElement","flyTo","animate","rootElement","document","getElementById","ReactDOM","render","StrictMode","App"],"mappings":"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","file":"static/js/main.7e19ebbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/engineer.f8a39b5d.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ButtonControl = ({ mapLayers, onStopMoving, onStartMoving, onShow }) => {\r\n    return (\r\n        <div className=\"row-info\">\r\n            <pre className=\"text-left\">{JSON.stringify(mapLayers, 0, 2)}</pre>\r\n            <div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"button-get-location button-unmove\"\r\n                    onClick={onStopMoving}>\r\n                    Stop moving\r\n                </button>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"button-get-location button-moving\"\r\n                    onClick={onStartMoving}>\r\n                    Start moving\r\n                </button>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"button-get-location\"\r\n                    onClick={onShow}>\r\n                    Get my location\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nButtonControl.propTypes = {\r\n    mapLayers: PropTypes.array,\r\n    onStopMoving: PropTypes.func,\r\n    onStartMoving: PropTypes.func,\r\n    onShow: PropTypes.func\r\n};\r\n\r\nexport default ButtonControl;\r\n","import { Button, Form, Modal, Radio, Space, TimePicker } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst ModalChooseAction = ({\r\n    isModalVisible,\r\n    iniStyle,\r\n    onCancel,\r\n    onChangeStyle\r\n}) => {\r\n    const onFinish = values => {\r\n        onChangeStyle(values);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"Choose Options\"\r\n                visible={isModalVisible}\r\n                onCancel={onCancel}\r\n                footer={false}>\r\n                <Form\r\n                    name=\"basic\"\r\n                    labelCol={{ span: 8 }}\r\n                    wrapperCol={{ span: 16 }}\r\n                    onFinish={onFinish}\r\n                    autoComplete=\"off\"\r\n                    initialValues={iniStyle}>\r\n                    <Form.Item label=\"Color\" name=\"color\">\r\n                        <Radio.Group>\r\n                            <Radio value=\"#ff0000\">Red</Radio>\r\n                            <Radio value=\"#52c41a\">Green</Radio>\r\n                            <Radio value=\"#0059ff\">Blue</Radio>\r\n                            <Radio value=\"#faad14\">Yeallow</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item label=\"Time check\" name=\"time\">\r\n                        <TimePicker showNow={false} format=\"mm:ss\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        wrapperCol={{\r\n                            offset: { sm: 24, md: 8, lg: 6 },\r\n                            span: 16\r\n                        }}>\r\n                        <Space>\r\n                            <Button onClick={onCancel}>Cancle</Button>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Space>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nModalChooseAction.propTypes = {\r\n    isModalVisible: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    iniStyle: PropTypes.object,\r\n    onChangeStyle: PropTypes.func\r\n};\r\n\r\nexport default ModalChooseAction;\r\n","import L from \"leaflet\";\r\n\r\nexport default L.icon({\r\n  iconSize: [25, 41],\r\n  iconAnchor: [10, 41],\r\n  popupAnchor: [2, -40],\r\n  iconUrl: \"https://unpkg.com/leaflet@1.6/dist/images/marker-icon.png\",\r\n  shadowUrl: \"https://unpkg.com/leaflet@1.6/dist/images/marker-shadow.png\"\r\n});\r\n","import L from \"leaflet\";\r\n\r\nexport default  new L.Icon({\r\n  iconUrl: require(\"../assets/engineer.svg\"),\r\n  iconSize: [37, 45],\r\n  iconAnchor: [17, 46],//[left/top, right/bottom]\r\n  popupAnchor: [2, -40],\r\n})\r\n\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction useGeoLocation() {\r\n    const [location, setLocation] = useState({\r\n        loaded: false,\r\n        coordinates: { lat: '', lng: '' }\r\n    });\r\n\r\n    const onSuccess = location => {\r\n        setLocation({\r\n            loaded: true,\r\n            coordinates: {\r\n                lat: location.coords.latitude,\r\n                lng: location.coords.longitude\r\n            }\r\n        });\r\n    };\r\n\r\n    const onError = error => {\r\n        setLocation({\r\n            loaded: true,\r\n            error: {\r\n                code: error.code,\r\n                message: error.message\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!('geolocation' in navigator)) {\r\n            onError({\r\n                code: 0,\r\n                message: 'Geolocation not supported'\r\n            });\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n    }, []);\r\n\r\n    return location;\r\n}\r\nexport default useGeoLocation;\r\n","import moment from 'moment';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CircleMarker,\r\n    FeatureGroup,\r\n    Map,\r\n    Marker,\r\n    Polyline,\r\n    Popup,\r\n    TileLayer,\r\n    withLeaflet\r\n} from 'react-leaflet';\r\nimport 'leaflet-draw';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { EditControl } from 'react-leaflet-draw';\r\nimport PrintControlDefault from 'react-leaflet-easyprint';\r\nimport { usePosition } from 'use-position';\r\nimport ButtonControl from './components/button-control';\r\nimport ModalChooseAction from './components/modal-choose-option';\r\nimport icon from './constants/IconMarker';\r\nimport IconMarkerPin from './constants/IconMarkerPin';\r\nimport useGeoLocation from './hooks/geo-location';\r\nimport { listLocationUser } from './resources/data/list-positions.js';\r\nimport { convertTime } from './helpers/convert-time';\r\n\r\nconst PrintControl = withLeaflet(PrintControlDefault);\r\n\r\nconst ZOOM_LEVEL = 16;\r\n\r\nconst DamageAssessment = () => {\r\n    const userLocation = useGeoLocation();\r\n    const { latitude, longitude, error } = usePosition();\r\n\r\n    const [center, setCenter] = useState({ lat: 51.51, lng: -0.06 });\r\n    const [mapLayers, setMapLayers] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const [inprogress, setInprogress] = useState(false);\r\n    const [locationMoving, setLocationMoving] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [styleDraw, setStyleDraw] = useState({\r\n        color: '#ff0000',\r\n        time: moment('00:10', 'mm:ss')\r\n    });\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const mapRef = useRef();\r\n    const printControl = useRef();\r\n    let onTimeout = useRef();\r\n\r\n    useEffect(() => {\r\n        const timeCheck =\r\n            convertTime(moment(styleDraw.time).format('mm:ss')) * 1000;\r\n        console.log('timeCheck', timeCheck);\r\n        if (typeof count === 'number' && inprogress) {\r\n            onTimeout.current = setTimeout(() => {\r\n                setCount(c => c + 10000);\r\n            }, timeCheck);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(onTimeout.current);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (latitude && longitude && !error) {\r\n            // Fetch weather data here.\r\n            console.log('latitude', latitude);\r\n            console.log('longitude', longitude);\r\n            console.log('count', count);\r\n            if (!inprogress) return;\r\n            let newListMoving = [];\r\n\r\n            let newLocation = {\r\n                lat: latitude,\r\n                lng: longitude\r\n            };\r\n\r\n            // let indexLocation = count / 10000;\r\n            // console.log('indexLocation', indexLocation);\r\n            // if (count === 0) {\r\n            //     newListMoving.push(listLocationUser[count]);\r\n            // } else if (indexLocation >= listLocationUser.length) {\r\n            //     setInprogress(false);\r\n            //     return clearTimeout(onTimeout.current);\r\n            // } else {\r\n            //     newListMoving.push(listLocationUser[indexLocation]);\r\n            // }\r\n\r\n            setLocationMoving([newLocation, ...locationMoving]);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [count, inprogress]);\r\n\r\n    useEffect(() => {\r\n        if (userLocation.loaded && userLocation.error) return;\r\n        setCenter({\r\n            lat: userLocation.coordinates.lat,\r\n            lng: userLocation.coordinates.lng\r\n        });\r\n    }, [userLocation]);\r\n\r\n    const handleCreate = e => {\r\n        console.log(e);\r\n\r\n        const { layerType, layer } = e;\r\n        if (layerType === 'polygon') {\r\n            const { _leaflet_id } = layer;\r\n\r\n            setMapLayers(layers => [\r\n                ...layers,\r\n                { id: _leaflet_id, latlngs: layer.getLatLngs()[0] }\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const handleEdited = e => {\r\n        console.log(e);\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n\r\n        Object.values(_layers).map(({ _leaflet_id, editing }) =>\r\n            setMapLayers(layers =>\r\n                layers.map(l =>\r\n                    l.id === _leaflet_id\r\n                        ? { ...l, latlngs: { ...editing.latlngs[0] } }\r\n                        : l\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleDeleted = e => {\r\n        console.log(e);\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n\r\n        Object.values(_layers).map(({ _leaflet_id }) =>\r\n            setMapLayers(layers => layers.filter(l => l.id !== _leaflet_id))\r\n        );\r\n    };\r\n\r\n    const showMyLocation = () => {\r\n        if (userLocation.loaded && !userLocation.error) {\r\n            mapRef.current.leafletElement.flyTo(\r\n                [userLocation.coordinates.lat, userLocation.coordinates.lng],\r\n                ZOOM_LEVEL,\r\n                { animate: true }\r\n            );\r\n            setCenter({\r\n                lat: userLocation.coordinates.lat,\r\n                lng: userLocation.coordinates.lng\r\n            });\r\n        } else {\r\n            alert(userLocation.error.message);\r\n        }\r\n    };\r\n\r\n    const handleStopMoving = () => {\r\n        alert('Stop moving!');\r\n        clearTimeout(onTimeout.current);\r\n    };\r\n\r\n    const handleChangeStyle = values => {\r\n        setStyleDraw(values);\r\n        setIsModalVisible(false);\r\n        setInprogress(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                center={{ lat: 51.51, lng: -0.06 }}\r\n                zoom={ZOOM_LEVEL}\r\n                ref={mapRef}\r\n                style={{ height: '50vh' }}>\r\n                <Marker position={center} icon={icon}>\r\n                    <Popup>You are here.</Popup>\r\n                </Marker>\r\n                <TileLayer\r\n                    url=\"https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\r\n                    maxZoom={20}\r\n                    subdomains={['mt1', 'mt2', 'mt3']}\r\n                />\r\n                <Polyline color={styleDraw.color} positions={locationMoving} />\r\n                {locationMoving &&\r\n                    locationMoving.length > 0 &&\r\n                    locationMoving.map(\r\n                        (loca, index) =>\r\n                            JSON.stringify(loca) !== JSON.stringify(center) && (\r\n                                <CircleMarker\r\n                                    key={index}\r\n                                    center={loca}\r\n                                    fill={true}\r\n                                    color={styleDraw.color}\r\n                                    radius={3}>\r\n                                    <Popup>\r\n                                        <b>lat:</b> {loca?.lat} <br />\r\n                                        <b>lng:</b> {loca?.lng} <br />\r\n                                    </Popup>\r\n                                </CircleMarker>\r\n                            )\r\n                    )}\r\n\r\n                {mapLayers &&\r\n                    mapLayers.length > 0 &&\r\n                    mapLayers.map(layer =>\r\n                        layer.latlngs.map((location, index) => (\r\n                            <Marker\r\n                                key={index}\r\n                                position={location}\r\n                                icon={IconMarkerPin}>\r\n                                <Popup>\r\n                                    You are here.\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        id=\"myfile\"\r\n                                        name=\"myfile\"\r\n                                        onChange={e =>\r\n                                            console.log(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Popup>\r\n                            </Marker>\r\n                        ))\r\n                    )}\r\n                <PrintControl\r\n                    ref={printControl}\r\n                    position=\"topleft\"\r\n                    sizeModes={['Current', 'A4Portrait', 'A4Landscape']}\r\n                    hideControlContainer={false}\r\n                />\r\n                <PrintControl\r\n                    position=\"topleft\"\r\n                    sizeModes={['Current', 'A4Portrait', 'A4Landscape']}\r\n                    hideControlContainer={false}\r\n                    title=\"Export as PNG\"\r\n                    exportOnly\r\n                />\r\n                <FeatureGroup>\r\n                    <EditControl\r\n                        position=\"topright\"\r\n                        onCreated={handleCreate}\r\n                        onEdited={handleEdited}\r\n                        onDeleted={handleDeleted}\r\n                        draw={{\r\n                            rectangle: true,\r\n                            polyline: true,\r\n                            circle: false,\r\n                            circlemarker: false,\r\n                            marker: false\r\n                        }}\r\n                    />\r\n                </FeatureGroup>\r\n            </Map>\r\n            <ButtonControl\r\n                mapLayers={mapLayers}\r\n                onStopMoving={handleStopMoving}\r\n                onStartMoving={showModal}\r\n                onShow={showMyLocation}\r\n            />\r\n\r\n            <ModalChooseAction\r\n                isModalVisible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                iniStyle={styleDraw}\r\n                onChangeStyle={handleChangeStyle}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DamageAssessment;\r\n","export const convertTime = duration => {\r\n    const [minutes, seconds] = duration.split(':');\r\n    return Number(minutes) * 60 + Number(seconds);\r\n};\r\n","import React from 'react';\r\nimport './styles.css';\r\nimport DamageAssessment from './Map';\r\n\r\nexport default () => <DamageAssessment />;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}