{"version":3,"sources":["assets/engineer.svg","components/button-control/index.jsx","components/list-position-draw/index.jsx","components/modal-choose-option/index.jsx","components/radio-select-color/index.jsx","constants/IconMarker.jsx","constants/IconMarkerPin.jsx","hooks/geo-location/index.js","hooks/get-country/index.js","Map.jsx","helpers/convert-time.js","App.jsx","index.jsx"],"names":["module","exports","ButtonControl","onStopMoving","onStartMoving","isTouchCheck","onShow","onTouchCheckPoint","type","shape","onClick","danger","Panel","Collapse","ListPositionDraw","listPosition","onSetMarkerChecker","length","map","layer","i","key","id","index","className","header","bordered","dataSource","latlngs","renderItem","item","Item","justify","Text","mark","JSON","stringify","ModalChooseAction","isModalVisible","iniStyle","onCancel","onChangeStyle","useState","isTouch","setIsTouch","title","visible","footer","name","labelCol","span","wrapperCol","onFinish","values","autoComplete","initialValues","label","Group","value","onChange","e","target","showNow","format","offset","sm","md","lg","htmlType","SelectColor","onChangeColorDraw","colorSelect","L","icon","iconSize","iconAnchor","popupAnchor","iconUrl","shadowUrl","Icon","require","useGeoLocation","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","useGeoCountry","country","setCountry","fetch","then","response","json","payload","PrintControl","withLeaflet","PrintControlDefault","DamageAssessment","userLocation","useCountry","usePosition","center","setCenter","listPositionDraw","setListPositionDraw","count","setCount","inprogress","setInprogress","locationMoving","setLocationMoving","setIsModalVisible","color","time","moment","action","styleDraw","setStyleDraw","markerChecker","setMarkerChecker","colorDraw","setColorDraw","setMap","isCheckMarker","setIsCheckMaker","mapRef","useRef","onTimeout","lon","timeCheck","duration","split","minutes","seconds","Number","convertTime","current","setTimeout","c","clearTimeout","console","log","newLocation","handleConvertListEdit","data","pick","handleSetMarkerChecker","useCallback","Map","zoom","ref","style","height","fullscreenControl","whenReady","Marker","position","Popup","positionDraw","placeholder","isEmpty","IconMarkerPin","TileLayer","url","maxZoom","subdomains","Polyline","positions","onUpdateListPosition","MessageOutlined","alert","leafletElement","flyTo","animate","loca","CircleMarker","fill","radius","sizeModes","hideControlContainer","exportOnly","FeatureGroup","onCreated","layerType","_leaflet_id","layers","editing","getLatLngs","onEdited","_layers","Object","l","onDeleted","filter","onEditVertex","poly","draw","polyline","shapeOptions","allowIntersection","showLength","metric","feet","polygon","edit","showArea","rectangle","circle","circlemarker","marker","rootElement","document","getElementById","ReactDOM","render","StrictMode","App"],"mappings":"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","file":"static/js/main.7b42d869.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/engineer.f8a39b5d.svg\";","import { Button, Col } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst ButtonControl = ({\r\n    onStopMoving,\r\n    onStartMoving,\r\n    isTouchCheck,\r\n    onShow,\r\n    onTouchCheckPoint\r\n}) => {\r\n    return (\r\n        <>\r\n            {isTouchCheck && (\r\n                <Col>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        onClick={onTouchCheckPoint}>\r\n                        Check\r\n                    </Button>\r\n                </Col>\r\n            )}\r\n            <Col>\r\n                <Button type=\"primary\" shape=\"round\" onClick={onStartMoving}>\r\n                    Start moving\r\n                </Button>\r\n            </Col>\r\n            <Col>\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    danger\r\n                    onClick={onStopMoving}>\r\n                    Stop moving\r\n                </Button>\r\n            </Col>\r\n            <Col>\r\n                <Button shape=\"round\" onClick={onShow}>\r\n                    Get my location\r\n                </Button>\r\n            </Col>\r\n        </>\r\n    );\r\n};\r\n\r\nButtonControl.propTypes = {\r\n    onStopMoving: PropTypes.func,\r\n    onStartMoving: PropTypes.func,\r\n    onShow: PropTypes.func,\r\n    isTouchCheck: PropTypes.bool,\r\n    onTouchCheckPoint: PropTypes.func\r\n};\r\n\r\nexport default ButtonControl;\r\n","import { Col, Collapse, List, Row, Typography } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst ListPositionDraw = ({ listPosition, onSetMarkerChecker }) => {\r\n    if (!listPosition || listPosition.length <= 0) return <></>;\r\n\r\n    //method for delete position on list manager\r\n    // const handleDeletedPosition = (position, idLayer) => {\r\n    //     let newArray = [];\r\n\r\n    //     map(listPosition, function (location) {\r\n    //         if (location.id === idLayer) {\r\n    //             location = {\r\n    //                 ...location,\r\n    //                 latlngs: filter(location.latlngs, function (o) {\r\n    //                     return o.lat !== position.lat;\r\n    //                 })\r\n    //             };\r\n    //         }\r\n    //         newArray.push(location);\r\n    //     });\r\n    //     onUpdateListPosition(newArray);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            {listPosition.map((layer, i) => (\r\n                <Collapse\r\n                    key={i + layer.id}\r\n                    index={i}\r\n                    className=\"fomat-collapsed\">\r\n                    <Panel header={`This is position ${layer.id}`}>\r\n                        <List\r\n                            bordered\r\n                            dataSource={layer.latlngs}\r\n                            renderItem={(item, index) => (\r\n                                <List.Item key={index}>\r\n                                    <Row justify=\"space-between\">\r\n                                        <Col\r\n                                            onClick={() =>\r\n                                                onSetMarkerChecker(item)\r\n                                            }>\r\n                                            <Typography.Text mark>\r\n                                                Location {index + 1}:{' '}\r\n                                                {JSON.stringify(item)}\r\n                                            </Typography.Text>\r\n                                        </Col>\r\n                                        {/* <Col>\r\n                                            <Button\r\n                                                type=\"primary\"\r\n                                                icon={\r\n                                                    <DeleteOutlined\r\n                                                        onClick={() =>\r\n                                                            handleDeletedPosition(\r\n                                                                item,\r\n                                                                layer.id\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                }\r\n                                                size=\"small\"\r\n                                            />\r\n                                        </Col> */}\r\n                                    </Row>\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </Panel>\r\n                </Collapse>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nListPositionDraw.propTypes = {\r\n    listPosition: PropTypes.array,\r\n    onSetMarkerChecker: PropTypes.func,\r\n    onUpdateListPosition: PropTypes.func\r\n};\r\n\r\nexport default ListPositionDraw;\r\n","import { Button, Form, Modal, Radio, Space, TimePicker } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\n\r\nconst ModalChooseAction = ({\r\n    isModalVisible,\r\n    iniStyle,\r\n    onCancel,\r\n    onChangeStyle\r\n}) => {\r\n    const [isTouch, setIsTouch] = useState(false);\r\n\r\n    const onFinish = values => {\r\n        onChangeStyle(values);\r\n    };\r\n\r\n    const onChangeOptionCheckPoint = e => {\r\n        setIsTouch(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"Choose Options\"\r\n                visible={isModalVisible}\r\n                onCancel={onCancel}\r\n                footer={false}>\r\n                <Form\r\n                    name=\"basic\"\r\n                    labelCol={{ span: 8 }}\r\n                    wrapperCol={{ span: 16 }}\r\n                    onFinish={onFinish}\r\n                    autoComplete=\"off\"\r\n                    initialValues={iniStyle}>\r\n                    <Form.Item label=\"Color\" name=\"color\">\r\n                        <Radio.Group>\r\n                            <Radio value=\"#ff0000\">Red</Radio>\r\n                            <Radio value=\"#52c41a\">Green</Radio>\r\n                            <Radio value=\"#0059ff\">Blue</Radio>\r\n                            <Radio value=\"#faad14\">Yeallow</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item label=\"Action\" name=\"action\">\r\n                        <Radio.Group onChange={onChangeOptionCheckPoint}>\r\n                            <Radio value={true}>Touch</Radio>\r\n                            <Radio value={false}>Set time</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n\r\n                    {!isTouch && (\r\n                        <Form.Item label=\"Time check\" name=\"time\">\r\n                            <TimePicker showNow={false} format=\"mm:ss\" />\r\n                        </Form.Item>\r\n                    )}\r\n\r\n                    <Form.Item\r\n                        wrapperCol={{\r\n                            offset: { sm: 24, md: 8, lg: 6 },\r\n                            span: 16\r\n                        }}>\r\n                        <Space>\r\n                            <Button onClick={onCancel}>Cancle</Button>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Space>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nModalChooseAction.propTypes = {\r\n    isModalVisible: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    iniStyle: PropTypes.object,\r\n    onChangeStyle: PropTypes.func\r\n};\r\n\r\nexport default ModalChooseAction;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Radio, Typography } from 'antd';\r\n\r\nfunction SelectColor({ onChangeColorDraw, colorSelect }) {\r\n    return (\r\n        <Col className=\"col-choose-color-draw\">\r\n            <Typography.Text>Choose color for draw line </Typography.Text>\r\n            <Radio.Group onChange={onChangeColorDraw} value={colorSelect}>\r\n                <Radio value=\"red\">Red</Radio>\r\n                <Radio value=\"blue\">Blue</Radio>\r\n                <Radio value=\"green\">Green</Radio>\r\n                <Radio value=\"black\">Black</Radio>\r\n            </Radio.Group>\r\n        </Col>\r\n    );\r\n}\r\n\r\nSelectColor.propTypes = {\r\n    onChangeColorDraw: PropTypes.func,\r\n    colorSelect: PropTypes.string\r\n};\r\n\r\nexport default SelectColor;\r\n","import L from 'leaflet';\r\n\r\nexport default L.icon({\r\n    iconSize: [25, 41],\r\n    iconAnchor: [10, 41],\r\n    popupAnchor: [2, -40],\r\n    iconUrl: 'https://unpkg.com/leaflet@1.6/dist/images/marker-icon.png',\r\n    shadowUrl: 'https://unpkg.com/leaflet@1.6/dist/images/marker-shadow.png'\r\n});\r\n","import L from 'leaflet';\r\n\r\nexport default new L.Icon({\r\n    iconUrl: require('../assets/engineer.svg'),\r\n    iconSize: [37, 45],\r\n    iconAnchor: [17, 46],\r\n    popupAnchor: [2, -40]\r\n});\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction useGeoLocation() {\r\n    const [location, setLocation] = useState({\r\n        loaded: false,\r\n        coordinates: { lat: '', lng: '' }\r\n    });\r\n\r\n    const onSuccess = location => {\r\n        setLocation({\r\n            loaded: true,\r\n            coordinates: {\r\n                lat: location.coords.latitude,\r\n                lng: location.coords.longitude\r\n            }\r\n        });\r\n    };\r\n\r\n    const onError = error => {\r\n        setLocation({\r\n            loaded: true,\r\n            error: {\r\n                code: error.code,\r\n                message: error.message\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!('geolocation' in navigator)) {\r\n            onError({\r\n                code: 0,\r\n                message: 'Geolocation not supported'\r\n            });\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n    }, []);\r\n\r\n    return location;\r\n}\r\nexport default useGeoLocation;\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction useGeoCountry() {\r\n    const [country, setCountry] = useState();\r\n\r\n    useEffect(() => {\r\n        fetch('http://ip-api.com/json')\r\n            .then(function (response) {\r\n                return response.json();\r\n            })\r\n            .then(function (payload) {\r\n                setCountry(payload);\r\n            });\r\n    }, []);\r\n\r\n    return country;\r\n}\r\nexport default useGeoCountry;\r\n","import { Button, Col, Row, Input } from 'antd';\r\nimport { isEmpty, pick } from 'lodash';\r\nimport moment from 'moment';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CircleMarker,\r\n    FeatureGroup,\r\n    Map,\r\n    Marker,\r\n    Polyline,\r\n    Popup,\r\n    TileLayer,\r\n    withLeaflet\r\n} from 'react-leaflet';\r\nimport 'leaflet-draw';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport Control from 'react-leaflet-control';\r\nimport { EditControl } from 'react-leaflet-draw';\r\nimport PrintControlDefault from 'react-leaflet-easyprint';\r\nimport { usePosition } from 'use-position';\r\nimport ButtonControl from './components/button-control';\r\nimport ListPositionDraw from './components/list-position-draw';\r\nimport ModalChooseAction from './components/modal-choose-option';\r\nimport SelectColor from './components/radio-select-color';\r\n// import MyMarkers from './components/show-marker';\r\nimport icon from './constants/IconMarker';\r\nimport IconMarkerPin from './constants/IconMarkerPin';\r\nimport { convertTime } from './helpers/convert-time';\r\nimport useGeoLocation from './hooks/geo-location';\r\nimport useGeoCountry from './hooks/get-country';\r\nimport { MessageOutlined } from '@ant-design/icons';\r\n\r\nconst PrintControl = withLeaflet(PrintControlDefault);\r\n\r\nconst ZOOM_LEVEL = 17;\r\n\r\nconst DamageAssessment = () => {\r\n    const userLocation = useGeoLocation();\r\n    const useCountry = useGeoCountry();\r\n    const { latitude, longitude, error } = usePosition();\r\n\r\n    const [center, setCenter] = useState({ lat: 51.51, lng: -0.06 });\r\n    const [listPositionDraw, setListPositionDraw] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const [inprogress, setInprogress] = useState(false);\r\n    const [locationMoving, setLocationMoving] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [styleDraw, setStyleDraw] = useState({\r\n        color: '#ff0000',\r\n        time: moment('00:10', 'mm:ss'),\r\n        action: false\r\n    });\r\n    const [markerChecker, setMarkerChecker] = useState({});\r\n    const [colorDraw, setColorDraw] = useState('red');\r\n    const [map, setMap] = useState(null);\r\n    const [isCheckMarker, setIsCheckMaker] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const mapRef = useRef();\r\n    let onTimeout = useRef();\r\n\r\n    useEffect(() => {\r\n        if (useCountry) {\r\n            setCenter({\r\n                lat: useCountry.lat,\r\n                lng: useCountry.lon\r\n            });\r\n        }\r\n    }, [useCountry]);\r\n\r\n    useEffect(() => {\r\n        const timeCheck =\r\n            convertTime(moment(styleDraw.time).format('mm:ss')) * 1000;\r\n        if (typeof count === 'number' && inprogress && !styleDraw.action) {\r\n            onTimeout.current = setTimeout(() => {\r\n                setCount(c => c + 10000);\r\n            }, timeCheck);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(onTimeout.current);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (latitude && longitude && !error) {\r\n            // Fetch weather data here.\r\n            console.log('latitude', latitude);\r\n            console.log('longitude', longitude);\r\n            console.log('count', count);\r\n            if (!inprogress) return;\r\n            let newLocation = {\r\n                lat: latitude,\r\n                lng: longitude\r\n            };\r\n\r\n            console.log([newLocation, ...locationMoving]);\r\n            setLocationMoving([newLocation, ...locationMoving]);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [count, inprogress]);\r\n\r\n    useEffect(() => {\r\n        if (userLocation.loaded && userLocation.error) return;\r\n        setCenter({\r\n            lat: userLocation.coordinates.lat,\r\n            lng: userLocation.coordinates.lng\r\n        });\r\n    }, [userLocation]);\r\n\r\n    const handleConvertListEdit = data => {\r\n        return data.map(value => pick(value, ['lat', 'lng']));\r\n    };\r\n\r\n    const handleCreate = e => {\r\n        const { layerType, layer } = e;\r\n        const { _leaflet_id } = layer;\r\n\r\n        if (layerType === 'polyline') {\r\n            return setListPositionDraw(layers => [\r\n                ...layers,\r\n                { id: _leaflet_id, latlngs: layer.editing.latlngs[0] }\r\n            ]);\r\n        }\r\n\r\n        if (layerType === 'polygon') {\r\n            console.log(layer.getLatLngs());\r\n            setListPositionDraw(layers => [\r\n                ...layers,\r\n                { id: _leaflet_id, latlngs: layer.getLatLngs()[0] }\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const handleEdited = e => {\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n        Object.values(_layers).map(({ _leaflet_id, editing }) => {\r\n            console.log(editing);\r\n            setListPositionDraw(layers =>\r\n                layers.map(l =>\r\n                    l.id === _leaflet_id\r\n                        ? {\r\n                              ...l,\r\n                              latlngs: handleConvertListEdit(\r\n                                  editing.latlngs[0][0]\r\n                              )\r\n                          }\r\n                        : l\r\n                )\r\n            );\r\n        });\r\n    };\r\n\r\n    const handleEditVertex = e => {\r\n        const { poly } = e;\r\n        setListPositionDraw(layers =>\r\n            layers.map(l =>\r\n                l.id === poly._leaflet_id\r\n                    ? {\r\n                          ...l,\r\n                          latlngs: handleConvertListEdit(\r\n                              poly.editing.latlngs[0][0]\r\n                          )\r\n                      }\r\n                    : l\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleDeleted = e => {\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n\r\n        Object.values(_layers).map(({ _leaflet_id }) =>\r\n            setListPositionDraw(layers =>\r\n                layers.filter(l => l.id !== _leaflet_id)\r\n            )\r\n        );\r\n    };\r\n\r\n    const showMyLocation = () => {\r\n        if (userLocation.loaded && !userLocation.error) {\r\n            mapRef.current.leafletElement.flyTo(\r\n                [userLocation.coordinates.lat, userLocation.coordinates.lng],\r\n                ZOOM_LEVEL,\r\n                { animate: true }\r\n            );\r\n            console.log(userLocation);\r\n            setCenter({\r\n                lat: userLocation.coordinates.lat,\r\n                lng: userLocation.coordinates.lng\r\n            });\r\n        } else {\r\n            alert(userLocation.error.message);\r\n        }\r\n    };\r\n\r\n    const handleStopMoving = () => {\r\n        alert('Stop moving!');\r\n        if (styleDraw.action) {\r\n            return setStyleDraw({ ...styleDraw, action: false });\r\n        }\r\n        clearTimeout(onTimeout.current);\r\n    };\r\n\r\n    const handleChangeStyle = values => {\r\n        setStyleDraw(values);\r\n        setIsModalVisible(false);\r\n        if (values.action) return;\r\n        setInprogress(true);\r\n    };\r\n\r\n    const handleSetMarkerChecker = useCallback(\r\n        value => {\r\n            setMarkerChecker(value);\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [markerChecker]\r\n    );\r\n\r\n    const handleUpdateListPosition = value => {\r\n        setListPositionDraw(value);\r\n    };\r\n\r\n    const handleUpdateColorDraw = e => {\r\n        setColorDraw(e.target.value);\r\n    };\r\n\r\n    const handelTouchCheckPoint = () => {\r\n        if (styleDraw.action && latitude && longitude && !error) {\r\n            let newLocation = {\r\n                lat: latitude,\r\n                lng: longitude\r\n            };\r\n            return setLocationMoving([newLocation, ...locationMoving]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Map\r\n                center={{ lat: 51.51, lng: -0.06 }}\r\n                zoom={ZOOM_LEVEL}\r\n                ref={mapRef}\r\n                style={{\r\n                    height: '100vh'\r\n                }}\r\n                fullscreenControl={true}\r\n                //whenReady the same with whenStart\r\n                whenReady={e => setMap(e.target)}>\r\n                {/* Ex for click to show marker on the map */}\r\n                {/* {map && <MyMarkers isCheckMarker={isCheckMarker} map={map} />} */}\r\n                <Marker position={center} icon={icon}>\r\n                    <Popup>You are here.</Popup>\r\n                </Marker>\r\n                {listPositionDraw &&\r\n                    listPositionDraw.length > 0 &&\r\n                    listPositionDraw.map(positionDraw =>\r\n                        positionDraw.latlngs.map(position => (\r\n                            <Marker position={position} icon={icon}>\r\n                                <Popup>\r\n                                    <Input placeholder=\"Basic usage\" />\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        id=\"myfile\"\r\n                                        name=\"myfile\"\r\n                                        onChange={e =>\r\n                                            console.log(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Popup>\r\n                            </Marker>\r\n                        ))\r\n                    )}\r\n                {markerChecker && !isEmpty(markerChecker) && (\r\n                    <Marker position={markerChecker} icon={IconMarkerPin}>\r\n                        <Popup>\r\n                            You are here.\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"myfile\"\r\n                                name=\"myfile\"\r\n                                onChange={e => console.log(e.target.value)}\r\n                            />\r\n                        </Popup>\r\n                    </Marker>\r\n                )}\r\n                <TileLayer\r\n                    url=\"https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\r\n                    maxZoom={20}\r\n                    subdomains={['mt1', 'mt2', 'mt3']}\r\n                />\r\n                <Polyline color={styleDraw.color} positions={locationMoving} />\r\n                {listPositionDraw && listPositionDraw.length > 0 && (\r\n                    <Control position=\"topleft\">\r\n                        <Row className=\"control-action list-positions\">\r\n                            <ListPositionDraw\r\n                                listPosition={listPositionDraw}\r\n                                onSetMarkerChecker={handleSetMarkerChecker}\r\n                                onUpdateListPosition={handleUpdateListPosition}\r\n                            />\r\n                        </Row>\r\n                    </Control>\r\n                )}\r\n                <Control position=\"topright\">\r\n                    <Button\r\n                        onClick={() => setIsCheckMaker(!isCheckMarker)}\r\n                        icon={<MessageOutlined />}\r\n                        className=\"icon-note\"\r\n                    />\r\n                </Control>\r\n                <Control position=\"bottomright\">\r\n                    <Row className=\"control-action\">\r\n                        <Col>\r\n                            <ButtonControl\r\n                                onStopMoving={handleStopMoving}\r\n                                onStartMoving={showModal}\r\n                                onShow={showMyLocation}\r\n                                isTouchCheck={styleDraw.action}\r\n                                onTouchCheckPoint={handelTouchCheckPoint}\r\n                            />\r\n                            <SelectColor\r\n                                onChangeColorDraw={handleUpdateColorDraw}\r\n                                colorSelect={colorDraw}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Control>\r\n                {locationMoving &&\r\n                    locationMoving.length > 0 &&\r\n                    locationMoving.map(\r\n                        (loca, index) =>\r\n                            JSON.stringify(loca) !== JSON.stringify(center) && (\r\n                                <CircleMarker\r\n                                    key={index}\r\n                                    center={loca}\r\n                                    fill={true}\r\n                                    color={styleDraw.color}\r\n                                    radius={3}>\r\n                                    <Popup>\r\n                                        <b>lat:</b> {loca?.lat} <br />\r\n                                        <b>lng:</b> {loca?.lng} <br />\r\n                                    </Popup>\r\n                                </CircleMarker>\r\n                            )\r\n                    )}\r\n                <PrintControl\r\n                    position=\"topleft\"\r\n                    sizeModes={['Current', 'A4Portrait', 'A4Landscape']}\r\n                    hideControlContainer={false}\r\n                    title=\"Export as PNG\"\r\n                    exportOnly\r\n                />\r\n                <FeatureGroup>\r\n                    <EditControl\r\n                        position=\"topright\"\r\n                        onCreated={handleCreate}\r\n                        onEdited={handleEdited}\r\n                        onDeleted={handleDeleted}\r\n                        onEditVertex={handleEditVertex}\r\n                        draw={{\r\n                            polyline: {\r\n                                shapeOptions: { color: colorDraw },\r\n                                allowIntersection: false,\r\n                                showLength: true,\r\n                                metric: false,\r\n                                feet: false\r\n                            },\r\n                            polygon: {\r\n                                allowIntersection: false,\r\n                                shapeOptions: { color: colorDraw },\r\n                                edit: false,\r\n                                showLength: true,\r\n                                metric: false,\r\n                                feet: false,\r\n                                showArea: true\r\n                            },\r\n                            rectangle: false,\r\n                            circle: false,\r\n                            circlemarker: false,\r\n                            marker: false\r\n                        }}\r\n                    />\r\n                </FeatureGroup>\r\n            </Map>\r\n\r\n            <ModalChooseAction\r\n                isModalVisible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                iniStyle={styleDraw}\r\n                onChangeStyle={handleChangeStyle}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DamageAssessment;\r\n","export const convertTime = duration => {\r\n    const [minutes, seconds] = duration.split(':');\r\n    return Number(minutes) * 60 + Number(seconds);\r\n};\r\n","import React from 'react';\r\nimport './styles.scss';\r\nimport DamageAssessment from './Map';\r\n\r\nexport default () => <DamageAssessment />;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}