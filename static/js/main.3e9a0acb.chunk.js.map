{"version":3,"sources":["assets/engineer.svg","constants/IconMarker.jsx","constants/IconMarkerPin.jsx","Map.jsx","App.jsx","index.jsx"],"names":["module","exports","L","icon","iconSize","iconAnchor","popupAnchor","iconUrl","shadowUrl","Icon","require","PrintControl","withLeaflet","PrintControlDefault","listLocationUser","lat","lng","Leaflet","userLocation","useState","loaded","coordinates","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","useGeoLocation","center","setCenter","mapLayers","setMapLayers","count","setCount","inprogress","setInprogress","locationMoving","setLocationMoving","mapRef","useRef","printControl","onTimeout","usePosition","current","setTimeout","c","clearTimeout","console","log","newListMoving","indexLocation","push","length","Map","zoom","ref","style","height","Marker","position","Popup","map","loca","index","JSON","stringify","key","IconMarkerPin","type","id","name","onChange","e","target","value","TileLayer","url","maxZoom","subdomains","Polyline","color","positions","layer","latlngs","sizeModes","hideControlContainer","title","exportOnly","FeatureGroup","onCreated","layerType","_leaflet_id","layers","getLatLngs","onEdited","_layers","Object","values","editing","l","onDeleted","filter","draw","rectangle","polyline","circle","circlemarker","marker","className","onClick","alert","leafletElement","flyTo","animate","rootElement","document","getElementById","ReactDOM","render","StrictMode","App"],"mappings":"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","file":"static/js/main.3e9a0acb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/engineer.f8a39b5d.svg\";","import L from \"leaflet\";\r\n\r\nexport default L.icon({\r\n  iconSize: [25, 41],\r\n  iconAnchor: [10, 41],\r\n  popupAnchor: [2, -40],\r\n  iconUrl: \"https://unpkg.com/leaflet@1.6/dist/images/marker-icon.png\",\r\n  shadowUrl: \"https://unpkg.com/leaflet@1.6/dist/images/marker-shadow.png\"\r\n});\r\n","import L from \"leaflet\";\r\n\r\nexport default  new L.Icon({\r\n  iconUrl: require(\"../assets/engineer.svg\"),\r\n  iconSize: [37, 45],\r\n  iconAnchor: [17, 46],//[left/top, right/bottom]\r\n  popupAnchor: [2, -40],\r\n})\r\n\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n    Map,\r\n    TileLayer,\r\n    FeatureGroup,\r\n    Marker,\r\n    Popup,\r\n    withLeaflet,\r\n    Polyline\r\n} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport { EditControl } from 'react-leaflet-draw';\r\nimport 'leaflet-draw';\r\nimport PrintControlDefault from 'react-leaflet-easyprint';\r\nimport { usePosition } from 'use-position';\r\nimport icon from './constants/IconMarker';\r\nimport IconMarkerPin from './constants/IconMarkerPin';\r\n\r\nconst PrintControl = withLeaflet(PrintControlDefault);\r\n\r\nconst listLocationUser = [\r\n    {\r\n        lat: 16.0742517,\r\n        lng: 108.2186261\r\n    },\r\n    {\r\n        lat: 16.07414,\r\n        lng: 108.217333\r\n    },\r\n    {\r\n        lat: 16.074088,\r\n        lng: 108.216818\r\n    },\r\n    {\r\n        lat: 16.073934,\r\n        lng: 108.216174\r\n    },\r\n\r\n    {\r\n        lat: 16.073851,\r\n        lng: 108.21525\r\n    },\r\n    {\r\n        lat: 16.073665,\r\n        lng: 108.214813\r\n    },\r\n    {\r\n        lat: 16.073542,\r\n        lng: 108.21393\r\n    },\r\n    {\r\n        lat: 16.072284,\r\n        lng: 108.213139\r\n    },\r\n    {\r\n        lat: 16.071665,\r\n        lng: 108.213246\r\n    },\r\n    {\r\n        lat: 16.07216,\r\n        lng: 108.216842\r\n    },\r\n    {\r\n        lat: 16.072428,\r\n        lng: 108.218439\r\n    },\r\n    {\r\n        lat: 16.072773,\r\n        lng: 108.220883\r\n    },\r\n    {\r\n        lat: 16.072773,\r\n        lng: 108.220883\r\n    },\r\n    {\r\n        lat: 16.074835,\r\n        lng: 108.220603\r\n    },\r\n    {\r\n        lat: 16.0742517,\r\n        lng: 108.2186261\r\n    },\r\n];\r\n\r\nconst useGeoLocation = () => {\r\n    const [location, setLocation] = useState({\r\n        loaded: false,\r\n        coordinates: { lat: '', lng: '' }\r\n    });\r\n\r\n    const onSuccess = location => {\r\n        setLocation({\r\n            loaded: true,\r\n            coordinates: {\r\n                lat: location.coords.latitude,\r\n                lng: location.coords.longitude\r\n            }\r\n        });\r\n    };\r\n\r\n    const onError = error => {\r\n        setLocation({\r\n            loaded: true,\r\n            error: {\r\n                code: error.code,\r\n                message: error.message\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!('geolocation' in navigator)) {\r\n            onError({\r\n                code: 0,\r\n                message: 'Geolocation not supported'\r\n            });\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n    }, []);\r\n\r\n    return location;\r\n};\r\n\r\nconst ZOOM_LEVEL = 15;\r\n\r\nconst Leaflet = () => {\r\n    const userLocation = useGeoLocation();\r\n\r\n    const [center, setCenter] = useState({ lat: 51.51, lng: -0.06 });\r\n    const [mapLayers, setMapLayers] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const [inprogress, setInprogress] = useState(false);\r\n    const [locationMoving, setLocationMoving] = useState([]);\r\n\r\n    const mapRef = useRef();\r\n    const printControl = useRef();\r\n    let onTimeout = useRef();\r\n\r\n    const { latitude, longitude, error } = usePosition();\r\n\r\n    useEffect(() => {\r\n        if (typeof count === 'number' && inprogress) {\r\n            onTimeout.current = setTimeout(() => {\r\n                setCount(c => c + 10000);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(onTimeout.current);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (latitude && longitude && !error) {\r\n            // Fetch weather data here.\r\n            console.log('latitude', latitude);\r\n            console.log('longitude', longitude);    \r\n            console.log('count', count);\r\n\r\n            let newListMoving = [];\r\n\r\n            let indexLocation = count / 10000;\r\n            console.log('indexLocation',indexLocation);\r\n            if (count === 0) {\r\n                newListMoving.push(listLocationUser[count]);\r\n            } else if (indexLocation === listLocationUser.length) {\r\n                return clearTimeout(onTimeout.current);\r\n            } else {\r\n                newListMoving.push(listLocationUser[indexLocation]);\r\n            }\r\n\r\n            setLocationMoving([...newListMoving, ...locationMoving]);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [count, inprogress]);\r\n\r\n    useEffect(() => {\r\n        if (userLocation.loaded && userLocation.error) return;\r\n        setCenter({\r\n            lat: userLocation.coordinates.lat,\r\n            lng: userLocation.coordinates.lng\r\n        });\r\n    }, [userLocation]);\r\n\r\n    const _onCreate = e => {\r\n        console.log(e);\r\n\r\n        const { layerType, layer } = e;\r\n        if (layerType === 'polygon') {\r\n            const { _leaflet_id } = layer;\r\n\r\n            setMapLayers(layers => [\r\n                ...layers,\r\n                { id: _leaflet_id, latlngs: layer.getLatLngs()[0] }\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const _onEdited = e => {\r\n        console.log(e);\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n\r\n        Object.values(_layers).map(({ _leaflet_id, editing }) =>\r\n            setMapLayers(layers =>\r\n                layers.map(l =>\r\n                    l.id === _leaflet_id\r\n                        ? { ...l, latlngs: { ...editing.latlngs[0] } }\r\n                        : l\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n    const _onDeleted = e => {\r\n        console.log(e);\r\n        const {\r\n            layers: { _layers }\r\n        } = e;\r\n\r\n        Object.values(_layers).map(({ _leaflet_id }) =>\r\n            setMapLayers(layers => layers.filter(l => l.id !== _leaflet_id))\r\n        );\r\n    };\r\n\r\n    const showMyLocation = () => {\r\n        if (userLocation.loaded && !userLocation.error) {\r\n            mapRef.current.leafletElement.flyTo(\r\n                [userLocation.coordinates.lat, userLocation.coordinates.lng],\r\n                ZOOM_LEVEL,\r\n                { animate: true }\r\n            );\r\n            setCenter({\r\n                lat: userLocation.coordinates.lat,\r\n                lng: userLocation.coordinates.lng\r\n            });\r\n        } else {\r\n            alert(userLocation.error.message);\r\n        }\r\n    };\r\n\r\n    const handleStopMoving = () => {\r\n        alert('Stop moving!');\r\n        clearTimeout(onTimeout.current);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                center={{ lat: 51.51, lng: -0.06 }}\r\n                zoom={ZOOM_LEVEL}\r\n                ref={mapRef}\r\n                style={{ height: '50vh' }}>\r\n                <Marker position={center} icon={icon}>\r\n                    <Popup>You are here.</Popup>\r\n                </Marker>\r\n\r\n                {locationMoving &&\r\n                    locationMoving.length > 0 &&\r\n                    locationMoving.map(\r\n                        (loca, index) =>\r\n                            JSON.stringify(loca) !== JSON.stringify(center) && (\r\n                                <Marker\r\n                                    key={index}\r\n                                    position={loca}\r\n                                    icon={IconMarkerPin}>\r\n                                    <Popup>\r\n                                        You are here.\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            id=\"myfile\"\r\n                                            name=\"myfile\"\r\n                                            onChange={e =>\r\n                                                console.log(e.target.value)\r\n                                            }\r\n                                        />\r\n                                    </Popup>\r\n                                </Marker>\r\n                            )\r\n                    )}\r\n                <TileLayer\r\n                    url=\"https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\r\n                    maxZoom={20}\r\n                    subdomains={['mt1', 'mt2', 'mt3']}\r\n                />\r\n                <Polyline color=\"#220bb9\" positions={locationMoving} />\r\n                {mapLayers &&\r\n                    mapLayers.length > 0 &&\r\n                    mapLayers.map(layer =>\r\n                        layer.latlngs.map((location, index) => (\r\n                            <Marker\r\n                                key={index}\r\n                                position={location}\r\n                                icon={IconMarkerPin}>\r\n                                <Popup>\r\n                                    You are here.\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        id=\"myfile\"\r\n                                        name=\"myfile\"\r\n                                        onChange={e =>\r\n                                            console.log(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Popup>\r\n                            </Marker>\r\n                        ))\r\n                    )}\r\n                <PrintControl\r\n                    ref={printControl}\r\n                    position=\"topleft\"\r\n                    sizeModes={['Current', 'A4Portrait', 'A4Landscape']}\r\n                    hideControlContainer={false}\r\n                />\r\n                <PrintControl\r\n                    position=\"topleft\"\r\n                    sizeModes={['Current', 'A4Portrait', 'A4Landscape']}\r\n                    hideControlContainer={false}\r\n                    title=\"Export as PNG\"\r\n                    exportOnly\r\n                />\r\n                <FeatureGroup>\r\n                    <EditControl\r\n                        position=\"topright\"\r\n                        onCreated={_onCreate}\r\n                        onEdited={_onEdited}\r\n                        onDeleted={_onDeleted}\r\n                        draw={{\r\n                            rectangle: true,\r\n                            polyline: true,\r\n                            circle: true,\r\n                            circlemarker: true,\r\n                            marker: true\r\n                        }}\r\n                    />\r\n                </FeatureGroup>\r\n            </Map>\r\n            <div className=\"row-info\">\r\n                <pre className=\"text-left\">\r\n                    {JSON.stringify(mapLayers, 0, 2)}\r\n                </pre>\r\n                <div>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"button-get-location button-unmove\"\r\n                        onClick={handleStopMoving}>\r\n                        Stop moving\r\n                    </button>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"button-get-location button-moving\"\r\n                        onClick={() => {\r\n                            alert('Start moving!');\r\n                            setInprogress(true);\r\n                        }}>\r\n                        Start moving\r\n                    </button>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"button-get-location\"\r\n                        onClick={showMyLocation}>\r\n                        Get my location\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Leaflet;\r\n","import React from 'react';\r\nimport './styles.css';\r\nimport Leaflet from './Map';\r\n\r\n\r\nexport default () => <Leaflet />;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    rootElement\r\n);\r\n"],"sourceRoot":""}